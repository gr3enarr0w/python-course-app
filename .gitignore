# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is not recommended to check in the JetBrains directory, but you can set
#  the JIRA plugin to ignore it.
.idea/

# VS Code
.vscode/

# macOS
.DS_Store

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Linux
*~

# Application specific
config/local.py
logs/
uploads/
temp/
*.sqlite
*.db

# Security - Never commit these
*.key
.encryption_key
credentials.json
service-account.json
*.pem
*.p12

# Testing artifacts and temporary files
*.png
*.jpg
*.jpeg
*.gif
test_screenshots*/
*_test_*/
*_test_*.png
bug_report_*.md
BUG_REPORT_*.md
debug_*.py
debug_*.js
debug_*.png
test_*.py
fix_*.py
diagnose_*.py
create_*.py
reset_*.py
recreate_*.py
list_*.py
setup_*.py
improve_*.py
overnight_*.py
ultra_fast_*.py
simple_*.py
multi_*.py
comprehensive_*.py
quick_*.py
fixed_*.py
species_*.py
campaign_*.py
loading_*.py
export_test_*/
security_privacy_test_*/
profile_settings_export_test_*/
user_menu_export_test_*/
xp_advancement_test_*/
critical_bug_test_screenshots_*/
species_test_screenshots_*/
ui_test_screenshots/
final_screenshots/
playwright-report/
test-results/
results.json/
archive/

# Report and documentation files (generated)
*.md
!README.md
!CLAUDE.md
!LICENSE.md
!CHANGELOG.md
!CONTRIBUTING.md

# Node.js dependencies and artifacts  
node_modules/
package-lock.json
package.json
playwright.config.js

# OCR and AI processing files
*ocr*.py
*ai*.py
*extract*.py
*process*.py
retry_*.py
swrpg_complete_extraction/
swrpg_extracted_data/
pdf_*.md

# Playwright tests
tests/
*.spec.js
simple-test.spec.js

# JSON diagnostic files
*.json
!web/character_data/characters.json
!web/static/data/*.json
!web/static/examples/*.json